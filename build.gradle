plugins {
	id 'org.springframework.boot' version '3.3.11'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'java'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

// Java 21 버전 설정
java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

group = 'com.gugus'
version = '0.0.1-SNAPSHOT'

repositories {
	mavenCentral()
}

jar {
	enabled = false
}

// QueryDSL 설정
def querydslDir = "$buildDir/generated/querydsl"

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

dependencies {
	// Lombok 버전 업데이트 (Java 21 호환)
	compileOnly 'org.projectlombok:lombok:1.18.30'
	annotationProcessor 'org.projectlombok:lombok:1.18.30'
	testCompileOnly 'org.projectlombok:lombok:1.18.30'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation ('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	}
	implementation 'org.springframework.boot:spring-boot-starter-undertow'

	//	Database
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation group: 'org.bgee.log4jdbc-log4j2', name: 'log4jdbc-log4j2-jdbc4.1', version: '1.16'
	
	// MySQL 드라이버 설정
	runtimeOnly 'com.mysql:mysql-connector-j:8.0.33'

	// QueryDSL 추가 (Spring Boot 3.x 호환)
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor(
		'com.querydsl:querydsl-apt:5.0.0:jakarta',
		'jakarta.annotation:jakarta.annotation-api',
		'jakarta.persistence:jakarta.persistence-api'
	)

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	// 테스트 관련 의존성들
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:testcontainers:1.19.3'
	testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
	testImplementation 'org.testcontainers:mysql:1.19.3'
	testImplementation 'org.mockito:mockito-junit-jupiter'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	
	// Spring REST Docs 의존성 추가
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// Asciidoctor 관련 의존성
	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	// cache
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'com.github.ben-manes.caffeine:caffeine'

	// AWS S3
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.730'

	// Firebase Admin SDK
	implementation 'com.google.firebase:firebase-admin:9.2.0'

	// Google Authenticator (TOTP)
	implementation 'com.warrenstrange:googleauth:1.5.0'

	// Swagger/OpenAPI
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
}

// QueryDSL 설정 부분
sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', querydslDir]
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

// QueryDSL 컴파일 설정
tasks.withType(JavaCompile).configureEach {
	options.generatedSourceOutputDirectory = file(querydslDir)
}

// clean 시 QueryDSL 생성 파일 삭제
clean.doLast {
	file(querydslDir).deleteDir()
}

// Spring REST Docs 설정
ext {
	snippetsDir = file('build/generated-snippets')
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	dependsOn test
}

bootJar {
	dependsOn asciidoctor
	from ("${asciidoctor.outputDir}/html5") {
		into 'static/docs'
	}
}
